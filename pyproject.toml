[tool.poetry]
name = "teamjobs-backend"
description = ""
authors = ["Muhammad Raza <51534936+MR1602@users.noreply.github.com>"]
include = [
    "resources",
    { "path" = "tests", "format" = "sdist" }
]
packages = [
    { include = "api" },
    { include = "teamjobsbackend" },
    { include = "users" }
]
version = "0.1.0"
repository = "https://github.com/teamtechggroup/teamjob-backend"

[tool.poetry.scripts]
manage-teamjbos = "teamjobsbackend.scripts:cli"

[tool.poetry.dependencies]
django = { extras = ["argon2", "bcrypt"], version = "^4.1.7" }
django-address = "^0.2.8"
# django-axes = "^5.40.1"
django-extra-checks = "^0.13.3"
django-health-check = "^3.17.0"
django-health-checks = "^0.0.1"
django-localflavor = "^3.1"
django-phonenumber-field = { extras = ["phonenumbers"], version = "^7.0.2" }
django-querycount = "^0.8.3"
django-quill-editor = "^0.1.40"
django-split-settings = "^1.2.0"
django-timezone-field = "^5.0"
djangorestframework = "^3.14.0"
psycopg2-binary = { version = "^2.9.5", markers = "sys_platform != 'linux'" }
python = "^3.11"
python-decouple = "^3.7"
setproctitle = "^1.3.2"
structlog = "^22.3.0"
tomli = "^2.0.1"
tzdata = "*"
pylint = "^2.16.2"
iniconfig = "^2.0.0"
factory-boy = "^3.2.1"
django-cors-headers = "^3.14.0"
opentelemetry-api = "^1.16.0"
opentelemetry-sdk = "^1.16.0"
opentelemetry-exporter-otlp-proto-http = "^1.16.0"
opentelemetry-instrumentation-django = "^0.37b0"
opentelemetry-instrumentation-requests = "^0.37b0"
opentelemetry-instrumentation-sqlite3 = "^0.37b0"
opentelemetry-distro = "^0.37b0"
opentelemetry-instrumentation-urllib3 = "^0.37b0"
opentelemetry-instrumentation-urllib = "^0.37b0"
opentelemetry-instrumentation-psycopg2 = "^0.37b0"
whitenoise = "^6.4.0"
psycogreen = "^1.0.2"
psycopg2 = { version = "^2.9.5", markers = "sys.platform == 'linux'" }
gevent = { version = "^22.10.2", markers = "sys.platform == 'linux'" }
dnspython = "^2.3.0"
python-dotenv = "^1.0.0"
django-anymail = {extras = ["sendgrid"], version = "^9.1"}
djangorestframework-serializer-extensions = "^2.0.1"
django-allauth = "^0.53.1"
dj-rest-auth = "^3.0.0"
django-jsonform = "^2.16.0"
html-sanitizer = "^1.9.3"
django-import-export = "^3.2.0"

[tool.poetry.group.dev.dependencies]
black = { extras = ["d"], version = "^23.1.0" }
coverage = { extras = ["toml"], version = "^7.1.0" }
django-coverage-plugin = "^3.0.0"
django-debug-toolbar = "^3.8.1"
django-stubs-ext = "^0.7.0"
djangorestframework-stubs = { extras = ["compatible-mypy"], version = "^1.9.1" }
factory-boy = "^3.2.1"
faker = "^17.0.0"
hypothesis = { extras = ["dateutil", "django", "pytz"], version = "^6.68.2" }
ipython = "^8.10.0"
isort = "^5.12.0"
nplusone = "^1.0.0"
pre-commit = "^3.0.4"
pylint-django = "^2.5.3"
pytest-cov = "^4.0.0"
pytest-django = "^4.5.2"
pytest-env = "^0.8.1"
pytest-factoryboy = "^2.5.1"
pytest-mock = "^3.10.0"
pytest-sugar = "^0.9.6"
pytest-timeout = "^2.1.0"
flake8 = "^6.0.0"
pytest-frozen-uuids = "^0.3.5"
tox = "^4.4.7"
types-factory-boy = "^0.4.1"
pytest-profiling = "^1.7.0"
pytest-skip-slow = "^0.0.5"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.isort]
atomic = true
profile = "black"
line_length = 88
skip_gitignore = true
known_first_party = ["teamjobsbackend", "api", "users"]
skip_glob = ["**/migrations/*.py"]
skip = ["wsgi.py", "gunicorn.conf.py"]

[tool.black]
line-length = 88
target-version = ['py310', 'py311']
include = '\.pyi?$'
extend-exclude = "migrations/"

[tool.pytest.ini_options]
env = [
    "DJANGO_ENV=tests",
    'D:DJANGO_SETTINGS_MODULE=teamjobsbackend.settings',
    'D:HYPOTHESIS_PROFILE=fast',
    'PYTHONDONTWRITEBYTECODE=1',
]
timeout = 30
xfail_strict = true

python_files = [
    "*_tests.py",
    "test_*.py",
]
norecursedirs = [
    "*.egg",
    ".eggs",
    ".git",
    ".hypothesis",
    ".mypy_cache",
    ".pytest_cache",
    ".tox",
    ".venv",
    "__pycache__",
    "build",
    "dist",
    "docs",
    "htmlcov",
]
addopts = [
    "--cov-report=term-missing",
    "--cov=api",
    "--cov=teamjobsbackend",
    "--cov=users",
    "--import-mode=importlib",
    "--tb=auto",
]

[tool.coverage.run]
branch = true
plugins = [
    "django_coverage_plugin",
]
omit = [
    "**/migrations/**",
    "teamjobsbackend/asgi.py",
    "teamjobsbackend/scripts.py",
    "teamjobsbackend/settings/**",
    "teamjobsbackend/urls.py",
    "teamjobsbackend/wsgi.py",
    "tests*",
]

[tool.coverage.report]
exclude_lines = ["TYPE_CHECKING", "# pragma: no cover"]

[tool.mypy]
enable_error_code = [
    "ignore-without-code",
    "redundant-expr",
    "truthy-bool",
    "unused-awaitable",
]
allow_redefinition = true
check_untyped_defs = true
disallow_untyped_decorators = true
explicit_package_bases = true
ignore_errors = false
ignore_missing_imports = true
implicit_reexport = false
local_partial_types = true
no_implicit_optional = true
show_error_codes = true
strict_equality = true
strict_optional = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

plugins = ["mypy_django_plugin.main", "mypy_drf_plugin.main"]

[[tool.mypy-override]]
module = "*.migrations.*"
ignore_errors = true

[tool.django-stubs]
django_settings_module = "teamjobsbackend.settings"
